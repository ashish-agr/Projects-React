{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","winner","undefined","gameState","turn","gameEnded","board","Array","fill","totalMoves","gameLocked","box","this","dataset","square","innerText","result","checkWinner","setState","winnerline","reloadline","setTimeout","random","Math","floor","clicked","document","querySelectorAll","moves","i","length","id","onClick","e","target","class","data-square","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b5344a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      winner: undefined\n    }\n    this.gameState={\n      turn: 'X',\n      gameEnded: false,\n      board: Array(9).fill(''),\n      totalMoves: 0,\n      gameLocked:false\n    }\n  }\n\n\n  clicked(box){\n\n    if(this.gameState.gameEnded || this.gameState.gameLocked) return;\n\n    if(this.gameState.board[box.dataset.square]=='')\n    {\n        this.gameState.board[box.dataset.square]=this.gameState.turn;\n        box.innerText=this.gameState.turn;\n        this.gameState.turn= this.gameState.turn == 'X' ? 'O' : 'X';\n        this.gameState.totalMoves++;\n    }\n\n    var result= this.checkWinner();\n    if(result == 'X') {\n      this.gameState.gameEnded=true;\n      this.setState({\n        winner: 'X',\n        winnerline:'Match won by X',\n        reloadline:'Refresh page to play again'\n      });\n    }\n    else if(result == 'O'){\n      this.gameState.gameEnded=true;\n      this.setState({\n        winner: 'O',\n        winnerline:'Match won by O',\n        reloadline:'Refresh page to play again'\n      });\n    }\n    else if (result=='draw'){\n      this.gameState.gameEnded=true;\n      this.setState({\n        winner: 'draw',\n        winnerline:'Match is drawn',\n        reloadline:'Refresh page to play again'\n      });\n    }\n\n    if(this.gameState.turn == 'O' && !this.gameState.gameEnded){\n      this.gameState.gameLocked=true;\n      setTimeout(()=>{\n        do{\n        var random = Math.floor(Math.random()*9);\n      } while(this.gameState.board[random] != '');\n      this.gameState.gameLocked=false;\n      this.clicked(document.querySelectorAll('.square')[random])\n\n      },1000); \n    }\n  }\n\n  checkWinner(){\n\n    var moves=[\n    /*column*/\n    [0,3,6], [1,4,7], [2,5,8], \n    /*diagonal*/\n    [0,4,8], [2,4,6],\n    /*rows*/\n    [0,1,2], [3,4,5], [6,7,8]\n    ];\n    var board = this.gameState.board;\n    for(let i=0; i<moves.length; i++){\n      if(board[moves[i][0]] == board[moves[i][1]] \n            && board[moves[i][1]] == board[moves[i][2]])\n      return board[moves[i][0]];\n    }\n\n    if(this.gameState.totalMoves==9){\n      return 'draw';\n    }\n  }\n\n  render(){\n  return (\n      <div id=\"game\">\n        <div id=\"head\">\n          Dumb Tic-Tac-Toe AI Tutorial\n          <div id=\"delay\">\n            AI responds in 1 second\n          </div>\n        </div>\n        <div id=\"board\" onClick={(e)=>this.clicked(e.target)}>\n            <div class=\"square\" data-square=\"0\"></div>\n            <div class=\"square\" data-square=\"1\"></div>\n            <div class=\"square\" data-square=\"2\"></div>\n            <div class=\"square\" data-square=\"3\"></div>\n            <div class=\"square\" data-square=\"4\"></div>\n            <div class=\"square\" data-square=\"5\"></div>\n            <div class=\"square\" data-square=\"6\"></div>\n            <div class=\"square\" data-square=\"7\"></div>\n            <div class=\"square\" data-square=\"8\"></div>\n        </div> \n        <div id=\"status\">{this.state.winnerline}</div>\n        <div id=\"status\">{this.state.reloadline}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}