{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","cal","Math","floor","className","style","recipe","ingredient","map","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,SAAW,yBAAyB,MAAQ,sBAAsB,WAAa,6B,qNCmBhJC,EAjBA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,YAClCC,EAAIC,KAAKC,MAAML,GACrB,OACC,yBAAKM,UAAWC,IAAMC,QACrB,wBAAIF,UAAWC,IAAMR,OAAQA,GAC7B,wBAAIO,UAAWC,IAAME,YACnBP,EAAYQ,KAAI,SAAAD,GAAU,OAC1B,4BAAKA,EAAWE,UAElB,uBAAGL,UAAWC,IAAMP,UAApB,YAAwCG,GAExC,yBAAKG,UAAWC,IAAMN,MAAOW,IAAKX,EAAOY,IAAI,OCiDjCC,EA1DH,WAGX,IAHiB,EAMaC,mBAAS,IANtB,mBAMVC,EANU,KAMDC,EANC,OAOWF,mBAAS,IAPpB,mBAOVG,EAPU,KAOFC,EAPE,OAQSJ,mBAAS,IARlB,mBAQVK,EARU,KAQHC,EARG,KAUjBC,qBAAW,WACVC,MACE,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAZd,WAYc,oBAXb,qCAUG,cACZM,EADY,gBAEAA,EAASC,OAFT,OAEZC,EAFY,OAGlBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJC,2CAAH,qDAiBhB,OACC,yBAAKvB,UAAU,OACf,6CACC,0BAAM0B,SATU,SAAAC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMkBb,UAAU,eACpC,2BAAOA,UAAU,aAAa6B,KAAK,OACnCC,MAAOlB,EAAQmB,SAfG,SAAAJ,GACpBd,EAAUc,EAAEK,OAAOF,UAejB,4BAAQ9B,UAAU,gBAAgB6B,KAAK,UAAvC,WAID,yBAAK7B,UAAU,WACdU,EAAQN,KAAI,SAAAF,GAAM,OAClB,kBAAC,EAAD,CACA+B,IAAK/B,EAAOA,OAAOgC,MACnBzC,MAAOS,EAAOA,OAAOgC,MACrBxC,SAAUQ,EAAOA,OAAOR,SACxBC,MAAOO,EAAOA,OAAOP,MACrBC,YAAaM,EAAOA,OAAON,oBCzCXuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.633d74ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__395r8\",\"image\":\"recipe_image__gjj6V\",\"calories\":\"recipe_calories__wpykO\",\"title\":\"recipe_title__3xP1u\",\"ingredient\":\"recipe_ingredient__1m3_I\"};","import React from 'react';\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) =>{\r\n\tconst cal=Math.floor(calories);\r\n\treturn(\r\n\t\t<div className={style.recipe}>\r\n\t\t\t<h1 className={style.title}>{title}</h1>\r\n\t\t\t<ul className={style.ingredient}>\r\n\t\t\t\t{ingredients.map(ingredient =>(\r\n\t\t\t\t\t<li>{ingredient.text}</li>))}\r\n\t\t\t</ul>\r\n\t\t\t<p className={style.calories}>Calories:{cal}</p>\r\n\t\t\t\r\n\t\t\t<img className={style.image} src={image} alt=\"\"/>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\n\nconst App = () => {\n\t\n\n\tconst APP_ID = \"b50ca7d3\";\n\tconst APP_KEY = \"bc34021a2e1a27d6ae917199270d39fc\";\n\n\tconst [recipes, setRecipes] = useState([]);\n\tconst [search, setSearch] = useState('');\n\tconst [query, setQuery] = useState('');\n\n\tuseEffect( ()=> {\n\t\tgetRecipes();\n\t}, [query]);\n\n\tconst getRecipes = async () =>{\n\t\tconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n\t\tconst data =await response.json();\n\t\tsetRecipes(data.hits);\n\t\tconsole.log(data.hits);\n\t};\n\n\tconst updateSearch = e => {\n\t\tsetSearch(e.target.value);\n\t}\n\n\tconst getSearch = e =>{\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t\tsetSearch('');\n\t}\n\t\n\treturn(\n\t\t<div className=\"App\">\n\t\t<h1>Recipe Finder</h1>\n\t\t\t<form onSubmit={getSearch} className=\"search-form\">\n\t\t\t\t<input className=\"search-bar\" type=\"text\"\n\t\t\t\tvalue={search} onChange={updateSearch}/>\n\t\t\t\t<button className=\"search-button\" type=\"submit\">\n\t\t\t\tSearch\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<div className=\"recipes\">\n\t\t\t{recipes.map(recipe =>(\n\t\t\t\t<Recipe\n\t\t\t\tkey={recipe.recipe.label} \n\t\t\t\ttitle={recipe.recipe.label} \n\t\t\t\tcalories={recipe.recipe.calories} \n\t\t\t\timage={recipe.recipe.image}\n\t\t\t\tingredients={recipe.recipe.ingredients}\n\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\n\t\t);\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}